<?php

namespace Common\UserBundle\Entity;

use Symfony\Component\Security\Core\User\AdvancedUserInterface;
use Doctrine\ORM\Mapping as ORM;

/**
 * @ORM\Entity(repositoryClass = "Common\UserBundle\Repository\UserRepository")
 * @ORM\Table(name = "users")
 */
class User implements AdvancedUserInterface {
    
    /**
     * @ORM\Column(type = "integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy = "AUTO")
     */
    private $id;
    
    /**
     * @ORM\Column(type = "string", length = 20, unique = true)
     */
    private $username;
    
    /**
     * @ORM\Column(type = "string", length = 120, unique = true)
     */
    private $email;
    
    /**
     * @ORM\Column(type = "string", length = 64)
     */
    private $password;
    
    private $plainPassword;
    
    /**
     * @ORM\Column(name = "account_not_expired", type = "boolean")
     */
    private $accountNotExpired = true;
    
    /**
     * @ORM\Column(name = "account_not_locked", type = "boolean")
     */
    private $accountNotLocked = true;
    
    /**
     * @ORM\Column(name = "credentials_non_expired", type = "boolean")
     */
    private $credentialsNonExpired = true;
    
    /**
     * @ORM\Column(type = "boolean")
     */
    private $enabled = false;
    
    /**
     * @ORM\Column(type = "array")
     */
    private $roles;
    
    /**
     * @ORM\Column(name = "action_token", type = "string", length = 20, nullable = true)
     */
    private $actionToken;
    
    /**
     * @ORM\Column(name = "register_date", type = "datetime")
     */
    private $registerDate;
    
    /**
     * @ORM\Column(type = "string", length = 100, nullable = true)
     */
    private $avatar;
    
    public function eraseCredentials() {
        $this->plainPassword = null;
    }

    public function getPassword(): string {
        return $this->password;
    }

    public function getRoles() {
        return $this->roles;
    }

    public function getSalt() {
        return null;
    }

    public function getUsername(): string {
        return $this->username;
    }

    public function isAccountNonExpired(): bool {
        return $this->accountNotExpired;
    }

    public function isAccountNonLocked(): bool {
        return $this->accountNotLocked;
    }

    public function isCredentialsNonExpired(): bool {
        return $this->credentialsNonExpired;
    }

    public function isEnabled(): bool {
        return $this->enabled;
    }

}
